name: CI/CD Pipeline for ClipChronicle Project

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  formatting:
    name: "🔧 Formatting & Lint"
    runs-on: ubuntu-latest
    env:
      FMT_LINT: ${{ secrets.SCRIPT_FORMAT_LINT }}
    steps:
      - uses: actions/checkout@v3

      - name: Decode & run format/lint
        run: |
          echo "$FMT_LINT" | base64 --decode > fmt-lint.sh
          chmod +x fmt-lint.sh
          ./fmt-lint.sh

  testing:
    name: "🧪 Testing"
    runs-on: ubuntu-latest
    needs: formatting
    env:
      TEST: ${{ secrets.SCRIPT_TEST }}
    steps:
      - uses: actions/checkout@v3

      - name: Decode & run tests
        run: |
          echo "$TEST" | base64 --decode > test.sh
          chmod +x test.sh
          ./test.sh

  docker:
    name: "🐳 Build & Push Docker Images"
    runs-on: ubuntu-latest
    needs: testing
    permissions:
      contents: read
      packages: write
    env:
      DOCKER: ${{ secrets.SCRIPT_DOCKER }}
    steps:
      - uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Decode & run Docker build/push
        run: |
          echo "$DOCKER" | base64 --decode > docker.sh
          chmod +x docker.sh
          ./docker.sh

  deploy_aws:
    name: "🚀 Deploy with Ansible & HashiCorp"
    runs-on: ubuntu-latest
    needs: docker
    env:
      DEPLOY_ANSIBLE: ${{ secrets.SCRIPT_DEPLOY_ANSIBLE }}
    steps:
      - uses: actions/checkout@v3

      - name: Decode & run Ansible deploy
        run: |
          echo "$DEPLOY_ANSIBLE" | base64 --decode > deploy-ansible.sh
          chmod +x deploy-ansible.sh
          ./deploy-ansible.sh

  deploy_gcp:
    name: "☁️ Deploy to GCP"
    runs-on: ubuntu-latest
    needs: deploy_aws
    env:
      DEPLOY_GCP: ${{ secrets.SCRIPT_DEPLOY_GCP }}
    steps:
      - uses: actions/checkout@v3

      - name: Decode & run GCP deploy
        run: |
          echo "$DEPLOY_GCP" | base64 --decode > deploy-gcp.sh
          chmod +x deploy-gcp.sh
          ./deploy-gcp.sh

  sbom:
    name: "📦 Generate SBOM"
    runs-on: ubuntu-latest
    needs: deploy_gcp
    env:
      SBOM: ${{ secrets.SCRIPT_SBOM }}
    steps:
      - uses: actions/checkout@v3

      - name: Decode & run SBOM script
        run: |
          echo "$SBOM" | base64 --decode > generate-sbom.sh
          chmod +x generate-sbom.sh
          ./generate-sbom.sh

  complete:
    name: "🎉 Pipeline Complete"
    runs-on: ubuntu-latest
    needs: sbom
    env:
      COMPLETE: ${{ secrets.SCRIPT_COMPLETE }}
    steps:
      - uses: actions/checkout@v3

      - name: Decode & announce completion
        run: |
          echo "$COMPLETE" | base64 --decode > complete.sh
          chmod +x complete.sh
          ./complete.sh
